To implement the solution with the LeaveSetup model, here’s how you can set up the Django REST Framework (DRF) API view, HTML, AJAX, and jQuery to enable modification and submission of data within a scrollable table. This approach will show how to make all fields editable on clicking "Modify" and submit the updated data to the backend.

Step 1: Django Model, Serializer, and API View
Model (models.py)
This is already defined in your provided code.

Serializer (serializers.py)
Create a serializer for the LeaveSetup model.

python
Copy code
from rest_framework import serializers
from .models import LeaveSetup

class LeaveSetupSerializer(serializers.ModelSerializer):
    class Meta:
        model = LeaveSetup
        exclude = ['id', 'associate_id']  # exclude fields you don’t want to edit
API View (views.py)
Define a view that handles GET (to retrieve data) and PUT (to update data) requests.

python
Copy code
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status
from .models import LeaveSetup
from .serializers import LeaveSetupSerializer
from django.shortcuts import get_object_or_404

class LeaveSetupAPIView(APIView):
    def get(self, request):
        leave_setups = LeaveSetup.objects.all()
        serializer = LeaveSetupSerializer(leave_setups, many=True)
        return Response(serializer.data)

    def put(self, request, pk):
        leave_setup = get_object_or_404(LeaveSetup, pk=pk)
        serializer = LeaveSetupSerializer(leave_setup, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
URL Configuration (urls.py)
Add the view to your urls.py without using a router.

python
Copy code
from django.urls import path
from .views import LeaveSetupAPIView

urlpatterns = [
    path('api/leave-setup/', LeaveSetupAPIView.as_view(), name='leave-setup'),
    path('api/leave-setup/<int:pk>/', LeaveSetupAPIView.as_view(), name='leave-setup-detail')
]
Step 2: Frontend (HTML, AJAX, and jQuery)
Create a Bootstrap table within a modal that’s horizontally scrollable. This table includes "Modify" and "Submit" buttons to allow data editing and submission.

HTML and JavaScript
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Leave Setup Table</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
</head>
<body>
    <div class="container mt-4">
        <button class="btn btn-primary" data-toggle="modal" data-target="#leaveSetupModal">Open Leave Setup Table</button>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="leaveSetupModal" tabindex="-1" role="dialog" aria-labelledby="leaveSetupModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="leaveSetupModalLabel">Leave Setup Data</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div style="overflow-x: auto;">
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Leave Year</th>
                                    <th>Start Date</th>
                                    <th>End Date</th>
                                    <th>Casual Leave</th>
                                    <!-- Add all fields here -->
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="leaveSetupTableBody"></tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function () {
            // Load data when modal is shown
            $('#leaveSetupModal').on('show.bs.modal', function () {
                $.ajax({
                    url: '/api/leave-setup/',
                    method: 'GET',
                    success: function (data) {
                        let rows = '';
                        data.forEach(item => {
                            rows += `
                                <tr data-id="${item.id}">
                                    <td>${item.id}</td>
                                    <td class="editable">${item.leave_year}</td>
                                    <td class="editable">${item.leave_year_start}</td>
                                    <td class="editable">${item.leave_year_end}</td>
                                    <td class="editable">${item.casual_leave}</td>
                                    <!-- Repeat for other fields -->
                                    <td>
                                        <button class="btn btn-warning btn-sm modify-btn">Modify</button>
                                        <button class="btn btn-success btn-sm submit-btn" disabled>Submit</button>
                                    </td>
                                </tr>
                            `;
                        });
                        $('#leaveSetupTableBody').html(rows);
                    }
                });
            });

            // Modify button action
            $(document).on('click', '.modify-btn', function () {
                const row = $(this).closest('tr');
                row.find('.editable').each(function () {
                    const text = $(this).text();
                    $(this).html(`<input type="text" class="form-control" value="${text}">`);
                });
                row.find('.submit-btn').prop('disabled', false);
                $(this).prop('disabled', true);
            });

            // Submit button action
            $(document).on('click', '.submit-btn', function () {
                const row = $(this).closest('tr');
                const id = row.data('id');
                let formData = {};

                row.find('input').each(function () {
                    const value = $(this).val();
                    const fieldName = $(this).closest('td').attr('class').split(' ')[0];
                    formData[fieldName] = value;
                });

                $.ajax({
                    url: `/api/leave-setup/${id}/`,
                    method: 'PUT',
                    data: JSON.stringify(formData),
                    contentType: 'application/json',
                    success: function () {
                        alert('Data updated successfully');
                        row.find('.editable').each(function () {
                            $(this).text($(this).find('input').val());
                        });
                        row.find('.modify-btn').prop('disabled', false);
                        row.find('.submit-btn').prop('disabled', true);
                    },
                    error: function () {
                        alert('Failed to update data');
                    }
                });
            });
        });
    </script>
</body>
</html>
Explanation of Key Parts
Modal Table Structure: The table is scrollable horizontally using overflow-x: auto.
Modify Button: When clicked, it turns each cell (except id and associate_id) into an input field for editing. The Submit button is enabled, and the Modify button is disabled.
Submit Button: When clicked, collects all the input values, and sends a PUT request to update the data on the server. Upon success, the inputs are replaced with plain text showing updated values.
This setup makes all fields editable when you press Modify and updates the values when Submit is clicked.






.mdc-drawer {
    background:rgb(14 45 73) !important;
    background-color: ligh;
    position: fixed;
}











<div class="table-responsive">
    <table id="data-table" class="table table-responsive">
        <thead class="thead">
            <tr>
                <th class='text-left'>Id</th>
                <th class='text-left'>Associate Id</th>
                <th class='text-left'>Leave Year</th>
                <th class='text-left'>Casual Leave</th>
                <th class='text-left'>Earned Leave</th>
                <th class='text-left'>Sick Leave</th>
                <!-- Add other leave columns as needed -->
                <th class="text-left">Actions</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

<script>
$(document).ready(function () {
    const baseUrl = localStorage.getItem("url");
    const access = localStorage.getItem("access_token");
    let associates = [];
    let leaves = [];

    // Step 1: Fetch Associate List and Leave Data
    fetchAssociates();
    fetchLeaves();

    function fetchAssociates() {
        $.ajax({
            url: `${baseUrl}/api/associate/list/`,
            type: 'GET',
            headers: { "Authorization": `Bearer ${access}` },
            success: function (data) {
                associates = data;
                if (leaves.length) mergeDataAndDisplay();
            },
            error: function (err) {
                console.log('Error fetching associates:', err);
            }
        });
    }

    function fetchLeaves() {
        $.ajax({
            url: `${baseUrl}/api/leaves/list/`,
            type: 'GET',
            headers: { "Authorization": `Bearer ${access}` },
            success: function (data) {
                leaves = data;
                if (associates.length) mergeDataAndDisplay();
            },
            error: function (err) {
                console.log('Error fetching leaves:', err);
            }
        });
    }

    // Step 2: Merge Associate and Leave Data by Associate ID
    function mergeDataAndDisplay() {
        let combinedData = associates.map(associate => {
            let leaveData = leaves.find(leave => leave.associate_id === associate.associate_id) || {};
            return {
                ...associate,
                leave_year: leaveData.leave_year || '',
                casual_leave: leaveData.casual_leave || 0,
                earned_leave: leaveData.earned_leave || 0,
                sick_leave: leaveData.sick_leave || 0,
                // Add other leave fields as necessary
            };
        });
        
        displayTableData(combinedData);
    }

    // Step 3: Display Combined Data in the Table
    function displayTableData(data) {
        const tableBody = $('#data-table tbody');
        tableBody.empty();

        data.forEach(item => {
            tableBody.append(`
                <tr id="row-${item.associate_id}">
                    <td class="text-left">${item.id}</td>
                    <td class="text-left">${item.associate_id}</td>
                    <td class="text-left">${item.leave_year}</td>
                    <td class="text-left">
                        <input type="number" class="editable" value="${item.casual_leave}" data-id="${item.associate_id}" data-field="casual_leave" />
                    </td>
                    <td class="text-left">
                        <input type="number" class="editable" value="${item.earned_leave}" data-id="${item.associate_id}" data-field="earned_leave" />
                    </td>
                    <td class="text-left">
                        <input type="number" class="editable" value="${item.sick_leave}" data-id="${item.associate_id}" data-field="sick_leave" />
                    </td>
                    <!-- Add other leave fields as needed -->
                    <td class="text-left">
                        <button class="btn btn-primary btn-save" data-id="${item.associate_id}">Save</button>
                    </td>
                </tr>
            `);
        });
    }

    // Step 4: Handle Save Button Click for Editing Leave Data
    $(document).on('click', '.btn-save', function () {
        const associateId = $(this).data('id');
        const leaveData = {};

        // Collect all editable fields for the associate
        $(`#row-${associateId} .editable`).each(function () {
            leaveData[$(this).data('field')] = $(this).val();
        });

        // Send updated data to the server
        $.ajax({
            url: `${baseUrl}/api/leaves/update/${associateId}/`,
            type: 'PUT',
            headers: { "Authorization": `Bearer ${access}` },
            data: JSON.stringify(leaveData),
            contentType: 'application/json',
            success: function (response) {
                alert('Data updated successfully!');
            },
            error: function (error) {
                console.log('Error updating data:', error);
                alert('Failed to update data.');
            }
        });
    });
});
</script>























	$('button[type="submit"]').on('click', function() {
		const updatedData = [];

		// Loop through each row to gather modified data
		$('#data-table tbody tr').each(function() {
			const rowId = $(this).attr('id').split('-')[1];
			const associateId = $(this).find('td').eq(1).text(); // Assuming second column is Associate Id
			
			// Gather updated values for each editable field in the row
			const rowUpdates = {
				id: rowId,
				associate_id: associateId,
				leave_year: $(this).find('td').eq(2).find('input').val(),
				leave_year_start: $(this).find('td').eq(3).find('input').val(),
				leave_year_end: $(this).find('td').eq(4).find('input').val(),
				casual_leave: $(this).find('td').eq(5).find('input').val(),
				cl_carry: $(this).find('td').eq(6).find('input').val(),
				earned_leave: $(this).find('td').eq(7).find('input').val(),
				el_carry: $(this).find('td').eq(8).find('input').val(),
				sick_leave: $(this).find('td').eq(9).find('input').val(),
				sl_carry: $(this).find('td').eq(10).find('input').val(),
				paternity_leave: $(this).find('td').eq(11).find('input').val(),
				pl_carry: $(this).find('td').eq(12).find('input').val(),
				maternity_leave: $(this).find('td').eq(13).find('input').val(),
				ml_carry: $(this).find('td').eq(14).find('input').val(),
				loss_of_pay: $(this).find('td').eq(15).find('input').val(),
				lop_carry: $(this).find('td').eq(16).find('input').val(),
				compensatory_off: $(this).find('td').eq(17).find('input').val(),
				co_carry: $(this).find('td').eq(18).find('input').val(),
				child_adoption_leave: $(this).find('td').eq(19).find('input').val(),
				cal_carry: $(this).find('td').eq(20).find('input').val(),
			};

			updatedData.push(rowUpdates);
		});

		// Send updated data to server
		$.ajax({
			url: `${baseUrl}/api/leave-setup/update/`, // Adjust this endpoint for updating Leave Setup data
			type: 'POST',
			headers: {
				"Authorization" : `Bearer ${access}`,
				"Content-Type": "application/json"
			},
			data: JSON.stringify(updatedData),
			success: function(response) {
				alert('Data updated successfully!');
				loadData(); // Reload data to reflect changes
			},
			error: function(err) {
				console.log('Error updating data:', err);
				alert('Error updating data');
			}
		});
	});
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
<script>
	$(document).ready(function(){
		const baseUrl = localStorage.getItem('url');
		const user = localStorage.getItem('id');
		const access = localStorage.getItem('access_token');
		const userId = localStorage.getItem('userId');
		
		loadLeaves();
		loadLeaveTypes();
		loadHolidays();

		let holidays = {};

		function loadHolidays(){
			$.ajax({
				url: `${baseUrl}/leaves/holidays/`,
				type: 'GET',
				success: function(data){
					holidays = data;
					console.log("Holidays data loaded:", holidays);
				},
				error: function(err) {
					console.error("Error loading holidays:", err);
				}
			});
		}

		function loadLeaves(){
			$.ajax({
				url: `${baseUrl}/auth/leaves/`,
				type: 'GET',
				headers: {
					"Authorization": `Bearer ${access}`
				},
				success: function(data){
					let tbody = '';
                    data.forEach(function(leave) {
                        tbody += `
                            <tr>
                                <td class="text-left">${leave.casual_leave}</td>
                                <td class="text-left">${leave.earned_leave}</td>
								<td class="text-left">${leave.sick_leave}</td>
								<td class="text-left">${leave.paternity_leave}</td>
								<td class="text-left">${leave.maternity_leave}</td>
								<td class="text-left">${leave.loss_of_pay}</td>
								<td class="text-left">${leave.compensatory_off}</td>
								<td class="text-left">${leave.child_adoption_leave}</td>
                            </tr>
                        `;
                    });
                    $('#leave-table tbody').html(tbody);
				},
				error: function(err) {
					console.error("Error loading leaves:", err);
				}
			});
		}

		function loadLeaveTypes(){
			$.ajax({
				url:`${baseUrl}/leaves/list/`,
				type: 'GET',
				success: function(data) {
					$('#leave_types').empty();
					data.forEach(function(leave) {
						$('#leave_types').append(
							`<option value="${leave.id}">${leave.leave_type}</option>`
						);
					});
				},
				error: function(err) {
					console.error("Error fetching leave types:", err);
				}
			});
		}

		$('#leaveApplicationForm').submit(function(e){
			e.preventDefault();
			const formData = {
				associate: userId,
                leave_type: $('#leave_types').val(),
                start_date: $('#start_date').val(),
                end_date: $('#end_date').val(),
                is_half_day: $('#is_half_day').is(':checked'),
                half_day_type: $('#is_half_day').is(':checked') ? $('#half_day_type').val() : null,
                no_of_days: $('#no_of_days').val(),
                leave_remarks: $('#leave_remarks').val(),
            };

            $.ajax({
                url: `${baseUrl}/leaves/applications/`, 
                type: 'POST',
                contentType: 'application/json',
                headers: {
                    "Authorization": `Bearer ${access}`
                },
                data: JSON.stringify(formData),
                success: function(response) {
                    alert("Leave application submitted successfully!");
                    $('#leaveApplicationForm')[0].reset();
                    $('#halfDayTypeContainer').hide();
                    $('#applyLeaveModal').hide();
                },
                error: function(err) {
                    alert("Error submitting leave application.");
                    console.error("Error details:", err);
                }
            });
		});

		$('#closeAddDept').click(function(){
			$('#leaveApplicationForm')[0].reset();
			$('.form-control').removeClass('is-invalid');
			$('.invalid-feedback').text('');
		});

		$('#is_half_day').change(function() {
			if ($(this).is(':checked')) {
				$('#halfDayTypeContainer').show();
			} else {
				$('#halfDayTypeContainer').hide();
				$('#half_day_type').val(''); 
			}
		});

		$('#start_date, #end_date').change(function() {
			ApplyLeaveDatesCount();
		});

		function ApplyLeaveDatesCount(){
			const leaveStartDay = $('#start_date').val();
			const leaveEndDay = $('#end_date').val();

			const parseDate = (dateStr) => {
			  const [day, month, year] = dateStr.split("-").map(Number);
			  return new Date(year, month - 1, day);
			};

			const startDate = parseDate(leaveStartDay);
			const endDate = parseDate(leaveEndDay);
			const holidayDates = Object.keys(holidays).map(parseDate);
const halfDayStart = halfDayType === "start";
			const halfDayEnd = halfDayType === "end";
			const halfDayAll = halfDayType === "all";
			const halfDayStartAndEnd = halfDayType === "start_and_end";
			const halfDayType = $('#half_day_type').val();
			

			const isHoliday = (date) => holidayDates.some(holiday => holiday.getTime() === date.getTime());
			const isWeekend = (date) => date.getDay() === 0 || date.getDay() === 6;

			let totalLeaveDays = 0;
			let currentDate = new Date(startDate);

			while (currentDate <= endDate) {
				if (!isHoliday(currentDate) && !isWeekend(currentDate)) {
					if (halfDayAll) {
						totalLeaveDays += 0.5;
					} else if (currentDate.getTime() === startDate.getTime() && halfDayStart) {
						totalLeaveDays += 0.5;
					} else if (currentDate.getTime() === endDate.getTime() && halfDayEnd) {
						totalLeaveDays += 0.5;
					} else if (currentDate.getTime() === startDate.getTime() && currentDate.getTime() === endDate.getTime() && halfDayStartAndEnd) {
						totalLeaveDays += 1;
					} else {
						totalLeaveDays += 1;
					}
				}
				currentDate.setDate(currentDate.getDate() + 1);
			}

			$('#no_of_days').val(totalLeaveDays);
		}
	});
</script>





















<script>
	$(document).ready(function() {
		const baseUrl = localStorage.getItem('url');
		const user = localStorage.getItem('id');
		const access = localStorage.getItem('access_token');
		const userId = localStorage.getItem('userId');
		let holidays = {};
		let leaveBalances = {}; // Stores the leave balances for each leave type

		loadLeaves();
		loadLeaveTypes();
		loadHolidays();

		function loadHolidays() {
			$.ajax({
				url: `${baseUrl}/leaves/holidays/`,
				type: 'GET',
				success: function(data) {
					holidays = data;
					processHolidays();
				},
			});
		}

		function processHolidays() {
			console.log("Processing holidays data:", holidays);
		}

		function loadLeaves() {
			$.ajax({
				url: `${baseUrl}/auth/leaves/`,
				type: 'GET',
				headers: {
					"Authorization": `Bearer ${access}`
				},
				success: function(data) {
					let tbody = '';
					data.forEach(function(leave) {
						tbody += `
							<tr>
								<td class="text-left">${leave.casual_leave}</td>
								<td class="text-left">${leave.earned_leave}</td>
								<td class="text-left">${leave.sick_leave}</td>
								<td class="text-left">${leave.paternity_leave}</td>
								<td class="text-left">${leave.maternity_leave}</td>
								<td class="text-left">${leave.loss_of_pay}</td>
								<td class="text-left">${leave.compensatory_off}</td>
								<td class="text-left">${leave.child_adoption_leave}</td>
							</tr>
						`;

						// Store leave balances for validation
						leaveBalances = {
							casual_leave: leave.casual_leave,
							earned_leave: leave.earned_leave,
							sick_leave: leave.sick_leave,
							paternity_leave: leave.paternity_leave,
							maternity_leave: leave.maternity_leave,
							loss_of_pay: leave.loss_of_pay,
							compensatory_off: leave.compensatory_off,
							child_adoption_leave: leave.child_adoption_leave
						};
					});
					$('#leave-table tbody').html(tbody);
				}
			});
		}

		function loadLeaveTypes() {
			$.ajax({
				url: `${baseUrl}/leaves/list/`,
				type: 'GET',
				success: function(data) {
					$('#leave_types').empty();
					data.forEach(function(leave) {
						$('#leave_types').append(
							`<option value="${leave.id}">${leave.leave_type}</option>`
						);
					});
				},
				error: function(xhr, status, error) {
					console.error("Error fetching leave types:", error);
				}
			});
		}

		$('#leaveApplicationForm').submit(function(e) {
			e.preventDefault();
			const formData = {
				associate: userId,
				leave_type: $('#leave_types').val(),
				start_date: $('#start_date').val(),
				end_date: $('#end_date').val(),
				is_half_day: $('#is_half_day').is(':checked'),
				half_day_type: $('#is_half_day').is(':checked') ? $('#half_day_type').val() : null,
				no_of_days: $('#no_of_days').val(),
				leave_remarks: $('#leave_remarks').val(),
			};

			const selectedLeaveType = $('#leave_types option:selected').text().toLowerCase().replace(/ /g, '_');
			const requestedDays = parseFloat($('#no_of_days').val());
			const availableDays = parseFloat(leaveBalances[selectedLeaveType]);

			// Check if requested days exceed available balance
			if (requestedDays > availableDays) {
				alert("Insufficient leave days. You have " + availableDays + " days left for this leave type.");
				return;
			}

			$.ajax({
				url: `${baseUrl}/leaves/applications/`,
				type: 'POST',
				contentType: 'application/json',
				headers: {
					"Authorization": `Bearer ${access}`
				},
				data: JSON.stringify(formData),
				success: function(response) {
					alert("Leave application submitted successfully!");
					$('#leaveApplicationForm')[0].reset();
					$('#halfDayTypeContainer').hide();
					$('#applyLeaveModal').modal('hide');
				},
				error: function(err) {
					alert("Error submitting leave application.");
				}
			});
		});

		$('#is_half_day').change(function() {
			if ($(this).is(':checked')) {
				$('#halfDayTypeContainer').show();
			} else {
				$('#halfDayTypeContainer').hide();
				$('#half_day_type').val('');
			}
		});

		$('#start_date, #end_date').change(function() {
			ApplyLeaveDatesCount();
		});

		$('#half_day_type').change(function() {
			ApplyLeaveDatesCount();
		});

		function ApplyLeaveDatesCount() {
			const leaveStartDay = $('#start_date').val();
			const leaveEndDay = $('#end_date').val();

			if (!leaveStartDay || !leaveEndDay) {
				$('#no_of_days').val('');
				return;
			}

			const parseDate = (dateStr) => {
				const [year, month, day] = dateStr.split("-").map(Number);
				return new Date(year, month - 1, day);
			};

			const startDate = parseDate(leaveStartDay);
			const endDate = parseDate(leaveEndDay);
			const holidayDates = Object.keys(holidays).map(parseDate);

			const halfDayType = $('#half_day_type').val();
			let halfDayStart = halfDayType === "start_day";
			let halfDayEnd = halfDayType === "end_day";
			let halfDayAll = halfDayType === "all_day";
			let halfDayStartAndEnd = halfDayType === "start_and_end_day";

			const isHoliday = (date) => holidayDates.some(holiday => holiday.getTime() === date.getTime());
			const isWeekend = (date) => date.getDay() === 0 || date.getDay() === 6;

			let totalLeaveDays = 0;
			let currentDate = new Date(startDate);

			while (currentDate <= endDate) {
				if (!isHoliday(currentDate) && !isWeekend(currentDate)) {
					if (halfDayAll) {
						totalLeaveDays += 0.5;
					} else if (currentDate.getTime() === startDate.getTime() && halfDayStart) {
						totalLeaveDays += 0.5;
					} else if (currentDate.getTime() === endDate.getTime() && halfDayEnd) {
						totalLeaveDays += 0.5;
					} else if (currentDate.getTime() === startDate.getTime() && halfDayStartAndEnd) {
						totalLeaveDays += 0.0;
					} else {
						totalLeaveDays += 1;
					}
				}
				currentDate.setDate(currentDate.getDate() + 1);
			}

			$('#no_of_days').val(totalLeaveDays);
		}
	});
</script>








$(document).ready(function() {
	const baseUrl = localStorage.getItem('url');
	const user = localStorage.getItem('id');
	const access = localStorage.getItem('access_token');
	const userId = localStorage.getItem('userId');

	let leaveBalances = {}; // Store available leave days for each leave type

	loadLeaves();
	loadLeaveTypes();
	loadHolidays();

	function loadLeaves() {
		$.ajax({
			url: `${baseUrl}/auth/leaves/`,
			type: 'GET',
			headers: {
				"Authorization": `Bearer ${access}`
			},
			success: function(data) {
				leaveBalances = data.reduce((acc, leave) => {
					acc[leave.leave_type] = leave.available_days;
					return acc;
				}, {});
				populateLeaveTable(data);
			}
		});
	}

	function populateLeaveTable(data) {
		let tbody = '';
		data.forEach(function(leave) {
			tbody += `
				<tr>
					<td class="text-left">${leave.casual_leave}</td>
					<td class="text-left">${leave.earned_leave}</td>
					<td class="text-left">${leave.sick_leave}</td>
					<td class="text-left">${leave.paternity_leave}</td>
					<td class="text-left">${leave.maternity_leave}</td>
					<td class="text-left">${leave.loss_of_pay}</td>
					<td class="text-left">${leave.compensatory_off}</td>
					<td class="text-left">${leave.child_adoption_leave}</td>
				</tr>
			`;
		});
		$('#leave-table tbody').html(tbody);
	}

	$('#leaveApplicationForm').submit(function(e) {
		e.preventDefault();
		const leaveType = $('#leave_types').val();
		const requestedDays = parseFloat($('#no_of_days').val());
		const availableDays = leaveBalances[leaveType];

		if (requestedDays > availableDays) {
			alert("Insufficient leave days. You have " + availableDays + " days left for this leave type.");
			return;
		}

		const formData = {
			associate: userId,
			leave_type: leaveType,
			start_date: $('#start_date').val(),
			end_date: $('#end_date').val(),
			is_half_day: $('#is_half_day').is(':checked'),
			half_day_type: $('#is_half_day').is(':checked') ? $('#half_day_type').val() : null,
			no_of_days: requestedDays,
			leave_remarks: $('#leave_remarks').val(),
		};

		$.ajax({
			url: `${baseUrl}/leaves/applications/`,
			type: 'POST',
			contentType: 'application/json',
			headers: {
				"Authorization": `Bearer ${access}`
			},
			data: JSON.stringify(formData),
			success: function(response) {
				alert("Leave application submitted successfully!");
				$('#leaveApplicationForm')[0].reset();
				$('#halfDayTypeContainer').hide();
				$('#applyLeaveModal').modal('hide');

				// Calculate remaining leave days and update the leave setup table
				const remainingDays = availableDays - requestedDays;
				updateLeaveBalance(leaveType, remainingDays);
			},
			error: function(err) {
				alert("Error submitting leave application.");
			}
		});
	});

	function updateLeaveBalance(leaveType, remainingDays) {
		const updateData = {
			leave_type: leaveType,
			available_days: remainingDays
		};

		$.ajax({
			url: `${baseUrl}/auth/leaves/update-balance/`,
			type: 'PUT',
			contentType: 'application/json',
			headers: {
				"Authorization": `Bearer ${access}`
			},
			data: JSON.stringify(updateData),
			success: function(response) {
				alert(`Leave balance for ${leaveType} updated to ${remainingDays} days.`);
				loadLeaves(); // Refresh leave balances after update
			},
			error: function(err) {
				alert("Error updating leave balance.");
			}
		});
	}

	function ApplyLeaveDatesCount() {
		const leaveStartDay = $('#start_date').val();
		const leaveEndDay = $('#end_date').val();
		if (!leaveStartDay || !leaveEndDay) {
			$('#no_of_days').val('');
			return;
		}

		const parseDate = (dateStr) => {
			const [year, month, day] = dateStr.split("-").map(Number);
			return new Date(year, month - 1, day);
		};

		const startDate = parseDate(leaveStartDay);
		const endDate = parseDate(leaveEndDay);
		const halfDayType = $('#half_day_type').val();

		let totalLeaveDays = 0;
		let currentDate = new Date(startDate);

		while (currentDate <= endDate) {
			if (halfDayType === "all_day") {
				totalLeaveDays += 0.5;
			} else if (currentDate.getTime() === startDate.getTime() && halfDayType === "start_day") {
				totalLeaveDays += 0.5;
			} else if (currentDate.getTime() === endDate.getTime() && halfDayType === "end_day") {
				totalLeaveDays += 0.5;
			} else if (currentDate.getTime() === startDate.getTime() && halfDayType === "start_and_end_day") {
				totalLeaveDays += 0.0;
			} else {
				totalLeaveDays += 1;
			}
			currentDate.setDate(currentDate.getDate() + 1);
		}

		$('#no_of_days').val(totalLeaveDays);
	}

	$('#start_date, #end_date, #half_day_type').change(ApplyLeaveDatesCount);
	$('#is_half_day').change(function() {
		$('#halfDayTypeContainer').toggle(this.checked);
		ApplyLeaveDatesCount();
	});
});







<!-- HTML for the Leave Applications Table -->
<div class="mdc-layout-grid">
    <div class="mdc-layout-grid__inner">
        <div class="mdc-layout-grid__cell stretch-card mdc-layout-grid__cell--span-12">
            <div class="mdc-card p-0">
                <p class="card-title card-padding pb-0"><b>My Leave Applications:</b></p>
                <div class="table-responsive">
                    <table class="table table-bordered" id="leave-table">
                        <thead>
                            <tr>
                                <th class="text-left">Leave Type</th>
                                <th class="text-left">Start Date</th>
                                <th class="text-left">End Date</th>
                                <th class="text-left">Status</th>
                                <th class="text-left">Maternity Leave</th>
                                <th class="text-left">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Data will be injected here by jQuery -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript for Fetching Data and Injecting Rows -->
<script>
$(document).ready(function() {
    // Define the base URL for the API
    const baseUrl = 'YOUR_API_URL_HERE'; // replace with your actual API URL
    const accessToken = 'YOUR_ACCESS_TOKEN_HERE'; // replace with your token if needed

    // Fetch leave applications data from the API
    function loadLeaveApplications() {
        $.ajax({
            url: `${baseUrl}/leaves/applications/`, // update to your actual endpoint
            type: 'GET',
            headers: {
                "Authorization": `Bearer ${accessToken}`
            },
            success: function(data) {
                $('#leave-table tbody').empty(); // Clear existing data
                data.forEach(application => {
                    // Create a table row for each application
                    let row = `
                        <tr>
                            <td>${application.leave_type}</td>
                            <td>${application.start_date}</td>
                            <td>${application.end_date}</td>
                            <td>${application.status}</td>
                            <td>${application.is_maternity_leave ? 'Yes' : 'No'}</td>
                            <td>
                                ${application.status === 'Pending' 
                                    ? `<button class="btn btn-danger cancel-button" data-id="${application.id}">Cancel</button>` 
                                    : ''}
                            </td>
                        </tr>`;
                    $('#leave-table tbody').append(row); // Add row to the table body
                });
            },
            error: function(error) {
                alert("Error fetching leave applications.");
            }
        });
    }

    // Call the function to load leave applications when the page is ready
    loadLeaveApplications();

    // Event listener for cancel button click
    $('#leave-table').on('click', '.cancel-button', function() {
        const applicationId = $(this).data('id'); // Get the ID of the application
        if (confirm("Are you sure you want to cancel this leave application?")) {
            $.ajax({
                url: `${baseUrl}/leaves/applications/${applicationId}/`, // Update with correct endpoint
                type: 'PUT', // Or DELETE if you’re using a DELETE method
                headers: {
                    "Authorization": `Bearer ${accessToken}`
                },
                data: JSON.stringify({ status: "Cancelled" }),
                contentType: 'application/json',
                success: function(response) {
                    alert("Leave application cancelled successfully.");
                    loadLeaveApplications(); // Reload the table to update the data
                },
                error: function(error) {
                    alert("Error cancelling leave application.");
                }
            });
        }
    });
});
</script>












$(document).ready(function() {
    const baseUrl = 'YOUR_API_URL_HERE'; // replace with your actual API URL
    const accessToken = 'YOUR_ACCESS_TOKEN_HERE'; // replace with your token if needed

    // Function to load leave applications and render them in the table
    function loadLeaveApplications() {
        $.ajax({
            url: `${baseUrl}/leaves/applications/`, // Update with the actual endpoint
            type: 'GET',
            headers: {
                "Authorization": `Bearer ${accessToken}`
            },
            success: function(data) {
                $('#leave-table tbody').empty(); // Clear existing table data
                data.forEach(application => {
                    // Create a row for each leave application
                    let row = `
                        <tr>
                            <td>${application.leave_type}</td>
                            <td>${application.start_date}</td>
                            <td>${application.end_date}</td>
                            <td>${application.status}</td>
                            <td>${application.is_maternity_leave ? 'Yes' : 'No'}</td>
                            <td>
                                ${application.status === 'Pending' 
                                    ? `<button class="btn btn-danger cancel-button" data-id="${application.id}" data-leave-type="${application.leave_type}" data-no-of-days="${application.no_of_days}">Cancel</button>` 
                                    : ''}
                            </td>
                        </tr>`;
                    $('#leave-table tbody').append(row); // Append row to table
                });
            },
            error: function(error) {
                alert("Error fetching leave applications.");
            }
        });
    }

    // Load applications when the page is ready
    loadLeaveApplications();

    // Handle cancel button click event
    $('#leave-table').on('click', '.cancel-button', function() {
        const applicationId = $(this).data('id');
        const leaveType = $(this).data('leave-type');
        const noOfDays = parseFloat($(this).data('no-of-days'));

        if (confirm("Are you sure you want to cancel this leave application?")) {
            // Step 1: Update the leave application status to "Cancelled"
            $.ajax({
                url: `${baseUrl}/leaves/applications/${applicationId}/`,
                type: 'PUT', // Adjust if DELETE method is more appropriate
                headers: {
                    "Authorization": `Bearer ${accessToken}`
                },
                data: JSON.stringify({ status: "Cancelled" }),
                contentType: 'application/json',
                success: function(response) {
                    alert("Leave application cancelled successfully.");
                    
                    // Step 2: Update leave balance for the specific leave type
                    updateLeaveBalance(leaveType, noOfDays);
                },
                error: function(error) {
                    alert("Error cancelling leave application.");
                }
            });
        }
    });

    // Function to update leave balance in the setup table
    function updateLeaveBalance(leaveType, noOfDaysToAdd) {
        // Fetch current leave balance for the user
        $.ajax({
            url: `${baseUrl}/leaves/leave-setup/`, // Endpoint to fetch leave setup data
            type: 'GET',
            headers: {
                "Authorization": `Bearer ${accessToken}`
            },
            success: function(leaveSetupData) {
                const currentBalance = parseFloat(leaveSetupData[leaveType]);
                const updatedBalance = currentBalance + noOfDaysToAdd;

                // Make PUT request to update the leave balance in the setup table
                $.ajax({
                    url: `${baseUrl}/leaves/leave-setup/`, // Adjust if you need a specific endpoint with user ID
                    type: 'PUT',
                    contentType: 'application/json',
                    headers: {
                        "Authorization": `Bearer ${accessToken}`
                    },
                    data: JSON.stringify({ [leaveType]: updatedBalance }),
                    success: function(response) {
                        alert(`Leave balance for ${leaveType} updated to ${updatedBalance} days.`);
                        loadLeaveApplications(); // Refresh applications table
                    },
                    error: function(err) {
                        alert("Error updating leave balance.");
                    }
                });
            },
            error: function(err) {
                alert("Error fetching current leave balance.");
            }
        });
    }
});










<script>
    $(document).ready(function(){
        const baseUrl = localStorage.getItem('url');
        const user = localStorage.getItem('id');
        const access = localStorage.getItem('access_token');
        const userId = localStorage.getItem('userId');
        loadLeaves();
        loadLeaveTypes();
        loadMyApplications();

        let holidays = {};
        let leaveBalance = {};

        function loadMyApplications(){
            $.ajax({
                url: `${baseUrl}/leaves/applications/`,
                type: 'GET',
                headers: {
                    "Authorization": `Bearer ${access}`
                },
                success: function(data) {
                    $('#applications-table tbody').empty(); // Clear existing data
                    data.forEach(application => {
                        let row = `
                            <tr>
                                <td class="text-left">${application.leave_type}</td>
                                <td class="text-left">${application.start_date}</td>
                                <td class="text-left">${application.end_date}</td>
                                <td class="text-left">${application.status}</td>
                                <td>
                                    ${application.status === 'Pending' 
                                        ? `<button class="btn btn-primary cancel-button" data-id="${application.id}" data-leave-type="${application.leave_type}" data-no-of-days="${application.no_of_days}">Cancel</button>` 
                                        : ''}
                                </td>
                            </tr>`;
                        $('#applications-table tbody').append(row);
                    });
                },
                error: function(error) {
                    alert("Error fetching leave applications.");
                }
            });
        }

        function loadLeaves(){
            $.ajax({
                url: `${baseUrl}/auth/leaves/`,
                type: 'GET',
                headers: {
                    "Authorization": `Bearer ${access}`
                },
                success:function(data){
                    var tbody = '';
                    data.forEach(function(leave) {
                        tbody += `
                            <tr>
                                <td class="text-left">${leave.casual_leave}</td>
                                <td class="text-left">${leave.earned_leave}</td>
                                <td class="text-left">${leave.sick_leave}</td>
                                <td class="text-left">${leave.paternity_leave}</td>
                                <td class="text-left">${leave.maternity_leave}</td>
                                <td class="text-left">${leave.loss_of_pay}</td>
                                <td class="text-left">${leave.compensatory_off}</td>
                                <td class="text-left">${leave.child_adoption_leave}</td>
                            </tr>`;
                        leaveBalance = {
                            casual_leave: leave.casual_leave,
                            earned_leave: leave.earned_leave,
                            sick_leave: leave.sick_leave,
                            paternity_leave: leave.paternity_leave,
                            maternity_leave: leave.maternity_leave,
                            loss_of_pay: leave.loss_of_pay,
                            compensatory_off: leave.compensatory_off,
                            child_adoption_leave: leave.child_adoption_leave
                        };
                    });
                    $('#leave-table tbody').html(tbody);
                }
            });
        }

        function loadLeaveTypes(){
            $.ajax({
                url:`${baseUrl}/leaves/list/`,
                type: 'GET',
                success: function(data) {
                    $('#leave_types').empty();
                    data.forEach(function(leave) {
                        $('#leave_types').append(
                            `<option value="${leave.id}">${leave.leave_type}</option>`
                        );
                    });
                },
                error: function(xhr, status, error) {
                    console.error("Error fetching leave types:", error);
                }
            })
        }

        $(document).on('click', '.cancel-button', function() {
            const applicationId = $(this).data('id');
            const leaveType = $(this).data('leave-type');
            const noOfDays = parseFloat($(this).data('no-of-days'));

            const selectedLeaveType = leaveType.toLowerCase().replace(/ /g, '_');
            const updatedBalance = leaveBalance[selectedLeaveType] + noOfDays;

            // Update leave balance by adding back the cancelled leave days
            updateLeaveBalance(selectedLeaveType, updatedBalance);

            // Update leave application status to "Cancelled"
            updateLeaveApplicationStatus(applicationId);
        });

        function updateLeaveBalance(leaveType, remainingDays) {
            const updateData = {
                id: userId,
                [leaveType]: remainingDays,
            };

            $.ajax({
                url: `${baseUrl}/leaves/leave-setup/list/`,
                type: 'PUT',
                contentType: 'application/json',
                headers: {
                    "Authorization": `Bearer ${access}`
                },
                data: JSON.stringify(updateData),
                success: function(response) {
                    alert(`Leave balance for ${leaveType} updated to ${remainingDays} days.`);
                    loadLeaves(); // Refresh leave balances after update
                },
                error: function(err) {
                    alert("Error updating leave balance.");
                }
            });
        }

        function updateLeaveApplicationStatus(applicationId) {
            $.ajax({
                url: `${baseUrl}/leaves/applications/${applicationId}/`,
                type: 'PUT',
                contentType: 'application/json',
                headers: {
                    "Authorization": `Bearer ${access}`
                },
                data: JSON.stringify({ status: 'Cancelled' }),
                success: function(response) {
                    alert("Leave application has been cancelled.");
                    loadMyApplications(); // Refresh leave applications after update
                },
                error: function(err) {
                    alert("Error updating leave application status.");
                }
            });
        }
    });
</script>










// Declare an empty list and object
let dataList = [];
let dataObject = {};

// Function to fetch data from API 1 and populate the list
async function fetchDataList() {
  try {
    const response = await fetch('https://api.example.com/data1');  // API endpoint 1
    const data = await response.json();
    dataList = data;  // Populate the list with the fetched data
    console.log("Data List:", dataList); // You can use this list in another part of the code
  } catch (error) {
    console.error('Error fetching data from API 1:', error);
  }
}

// Function to fetch data from API 2 and populate the object
async function fetchDataObject() {
  try {
    const response = await fetch('https://api.example.com/data2');  // API endpoint 2
    const data = await response.json();
    dataObject = data;  // Populate the object with the fetched data
    console.log("Data Object:", dataObject); // You can use this object in another part of the code
  } catch (error) {
    console.error('Error fetching data from API 2:', error);
  }
}

// Call both functions to fetch the data
async function fetchData() {
  await fetchDataList();
  await fetchDataObject();
}

// Use the data in different parts
function useData() {
  console.log("Using Data List in Another Part:", dataList);
  console.log("Using Data Object in Another Part:", dataObject);
}

// Trigger the data fetching
fetchData().then(() => {
  // Once data is fetched, you can use them in different parts
  useData();
});















class LeaveApplicationViewSet(viewsets.ModelViewSet):
    queryset = LeaveApplication.objects.all()
    serializer_class = LeaveApplicationSerializer

    def create(self, request, *args, **kwargs):
        # Call the default create method to save the instance
        response = super().create(request, *args, **kwargs)
        leave_application = self.get_object()

        # Send email to manager upon leave application creation
        manager_email = leave_application.admin.email if leave_application.admin else None
        if manager_email:
            send_mail(
                subject='New Leave Application Submitted',
                message=f'{leave_application.associate} has applied for leave from {leave_application.start_date} to {leave_application.end_date}.',
                from_email=None,
                recipient_list=[manager_email],
                fail_silently=False,
            )

        return response

    def update(self, request, *args, **kwargs):
        # Retrieve the existing instance before updating
        instance = self.get_object()
        prev_status = instance.status

        # Update the instance with new data
        response = super().update(request, *args, **kwargs)
        instance.refresh_from_db()  # Reload the instance after update

        # Send email to associate if status changes to "Approved"
        if prev_status != 'Approved' and instance.status == 'Approved':
            associate_email = instance.associate.email
            if associate_email:
                send_mail(
                    subject='Leave Application Approved',
                    message=f'Your leave application from {instance.start_date} to {instance.end_date} has been approved.',
                    from_email=None,
                    recipient_list=[associate_email],
                    fail_silently=False,
                )

        return response










# views.py

from django.core.mail import send_mail
from rest_framework import status, viewsets
from rest_framework.response import Response
from .models import LeaveRequest
from .serializers import LeaveRequestSerializer
from django.conf import settings

class LeaveRequestViewSet(viewsets.ModelViewSet):
    queryset = LeaveRequest.objects.all()
    serializer_class = LeaveRequestSerializer

    def create(self, request, *args, **kwargs):
        # Handle leave request submission
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            leave_request = serializer.save()
            
            # Send email to the manager upon leave request
            self.send_leave_request_email_to_manager(leave_request)
            
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def update(self, request, *args, **kwargs):
        # Handle leave approval by manager
        instance = self.get_object()
        serializer = self.get_serializer(instance, data=request.data, partial=True)
        
        if serializer.is_valid():
            updated_leave_request = serializer.save()
            
            # If status is approved, send email to associate
            if updated_leave_request.status == 'Approved':
                self.send_approval_email_to_associate(updated_leave_request)
                
            return Response(serializer.data)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def send_leave_request_email_to_manager(self, leave_request):
        subject = 'New Leave Request'
        message = f"Dear {leave_request.manager.username},\n\n{leave_request.user.username} has applied for leave from {leave_request.start_date} to {leave_request.end_date}.\n\nReason: {leave_request.reason}\n\nPlease review and approve/reject the request."
        from_email = settings.EMAIL_HOST_USER
        recipient_list = [leave_request.manager.email]
        
        send_mail(subject, message, from_email, recipient_list)
    
    def send_approval_email_to_associate(self, leave_request):
        subject = 'Leave Request Approved'
        message = f"Dear {leave_request.user.username},\n\nYour leave request from {leave_request.start_date} to {leave_request.end_date} has been approved by your manager.\n\nReason: {leave_request.reason}\n\nEnjoy your time off!"
        from_email = settings.EMAIL_HOST_USER
        recipient_list = [leave_request.user.email]
        
        send_mail(subject, message, from_email, recipient_list)










 subject = serializer.validated_data['subject']
            message = serializer.validated_data['message']
            recipient_email = serializer.validated_data['recipient_email']
            
            # Send email using Django's send_mail function
            try:
                send_mail(
                    subject,
                    message,
                    'your-email@example.com',  # From email (use your configured email)
                    [recipient_email],         # To email (the recipient's email)
                    fail_silently=False
                )
                return Response({"message": "Email sent successfully!"}, status=status.HTTP_200_OK)
            except Exception as e:
                return Response({"error": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        




from django.core.mail import send_mail
from django.conf import settings

class LeaveApplicationView(APIView):
    permission_classes = [IsAuthenticated]

    def get(self, request, id=None):
        applications = LeaveApplication.objects.filter(associate=request.user).annotate(
            status_order=Case(
                When(status='Pending', then=Value(0)),
                When(status='Approved', then=Value(1)),
                When(status='Rejected', then=Value(2)),
                When(status='Cancelled', then=Value(3)),
                output_field=IntegerField(),
            )
        ).order_by('status_order')
        serializer = LeaveApplicationViewSerializer(applications, many=True)
        return Response(serializer.data)

    def post(self, request):
        data = request.data.copy()
        data['associate'] = request.user.id
        serializer = LeaveApplicationSerializer(data=data)
        if serializer.is_valid(raise_exception=True):
            serializer.save()

            # Update leave balance
            no_of_days = float(serializer.data.get('no_of_days'))
            leave_type = serializer.data.get('leave_type')
            leave = Leave.objects.get(id=leave_type)
            leave_name = leave.leave_type
            formatted_leave_name = leave_name.lower().replace(" ", "_")
            
            associate_id = serializer.data.get('associate')
            leaveSetupRecord = LeaveSetup.objects.get(associate_id=associate_id)
            remaining_days = getattr(leaveSetupRecord, formatted_leave_name, None)
            new_remaining_days = remaining_days - no_of_days
            setattr(leaveSetupRecord, formatted_leave_name, new_remaining_days)
            leaveSetupRecord.save()

            # Send email notification
            email_subject = "Leave Application Submitted"
            email_body = f"""
            Dear {request.user.username},

            Your leave application for {leave_name} has been successfully submitted.
            Number of days: {no_of_days}
            Remaining {leave_name} days: {new_remaining_days}

            Thank you.
            """
            send_mail(
                subject=email_subject,
                message=email_body,
                from_email=settings.EMAIL_HOST_USER,
                recipient_list=[request.user.email],  # or manager's email
                fail_silently=False,
            )

            return Response({"msg": "Application submitted and email sent"})
        return Response(serializer.errors)














<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Holiday Calendar</title>

    <!-- Include Bootstrap CSS and FullCalendar CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.css" rel="stylesheet">
</head>
<body>

<!-- Button to Open Modal -->
<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#calendarModal">
  Open Calendar Modal
</button>

<!-- Modal -->
<div class="modal fade" id="calendarModal" tabindex="-1" role="dialog" aria-labelledby="calendarModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="calendarModalLabel">Holiday Calendar</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <div id="calendar"></div> <!-- FullCalendar will render here -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<!-- Include jQuery, Bootstrap JS, FullCalendar JS, and other necessary libraries -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.10.1/main.min.js"></script>

<script>
  $(document).ready(function() {
    // Fetch holidays from the DRF backend
    $.ajax({
      url: '/api/holidays/',  // DRF endpoint to fetch holidays
      method: 'GET',
      success: function(data) {
        // Parse holiday data
        const holidays = data.map(holiday => {
          return {
            title: holiday.name,
            start: holiday.date, // Assuming date is in 'YYYY-MM-DD' format
            allDay: true,
            color: 'red'  // Optional: style for holiday dates
          };
        });

        // Initialize FullCalendar
        $('#calendar').fullCalendar({
          events: holidays,  // Use the holiday data
          header: {
            left: 'prev,next today',
            center: 'title',
            right: 'month,agendaWeek,agendaDay'
          },
          eventClick: function(info) {
            alert('Holiday: ' + info.event.title); // Show holiday info when clicked
          }
        });
      },
      error: function() {
        alert('Failed to load holidays');
      }
    });
  });
</script>

</body>
</html>
